451. Sort Characters By Frequency
Medium

2506

153

Add to List

Share
Given a string s, sort it in decreasing order based on the frequency of characters, and return the sorted string.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of English letters and digits.


###########################################################################

class Solution:
    def frequencySort(self, s: str) -> str:
        freq = {}
        
        for char in s:
            if char in freq:
                freq[char] = freq[char]+1
            else:
                freq[char] = 1
        print(freq)
        sorted(freq.values())
        stringDictValueSorted = (sorted(freq.items(), key=lambda t:t[1]))


        s = ''
        for (i,j) in stringDictValueSorted:
            part = i * j
            s += part
            
        return s[::-1]
